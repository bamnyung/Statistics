#rm(list=ls())
setwd("C://Users//Minyoung//Desktop//시계열//pj//dataset")
BTC_4h <- read.csv("BTC_4h.csv")
coin_name <- "BTC_4h" #CHANGE THIS!!
coin_raw <- BTC_4h #CHANGE THIS!!!
#coin_raw$date <- as.Date(as.character(coin_raw$date), format="%Y-%m-%d") #EXECUTE THIS ONLY FOR 1-DAY DATA!!
coin_raw$date <- as.POSIXct(as.character(coin_raw$date), format = "%Y-%m-%d %H:%M:%S") #EXECUTE THIS EXCEPT 1-DAY DATA!!
### 2. log trasform
coin_raw$logprice <- log(coin_raw$close) #log-transformation
rownames(coin_raw) <- coin_raw$date
x <- coin_raw$date[6501:7000]
y <- coin_raw$logprice[6501:7000]
data <- data.frame(date=x,logprice=y)
arima.fit <- auto.arima(y, seasonal=F, allowmean=T)
arima.order <- arimaorder(arima.fit)
arima.order
library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)
library(readxl)
library(forecast)
arima.fit <- auto.arima(y, seasonal=F, allowmean=T)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
returns <- as.xts(subset(coin_raw, select = diff))
ReturnsOffset = returns[6501:7000]
View(coin_raw)
coin_raw$diff <- c(0, diff(coin_raw$logprice))
returns <- as.xts(subset(coin_raw, select = diff))
ReturnsOffset = returns[6501:7000]
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="norm"
)
fit = tryCatch(
ugarchfit(
spec, ReturnsOffset, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# fitted AR(3,0,3)-GARCH(1,1)
coef(fit)
# plot res and standardized_res
res <- residuals(fit)
res
sigma(fit)
#=> fitted model에 적합시켜보면 원래데이터와 비슷함.
arch.test(ReturnsOffset)
#=> fitted model에 적합시켜보면 원래데이터와 비슷함.
import(aTSA)
#=> fitted model에 적합시켜보면 원래데이터와 비슷함.
install.packages("aTSA")
arch.test(ReturnsOffset)
library("aTSA")
arch.test(ReturnsOffset)
arch.test(auto.arima(ReturnsOffset))
auto.arima(ReturnsOffset)
arima.fit
arima.fit(ReturnsOffset,list=c(3,0,3))
arima(ReturnsOffset,order=c(3,0,3))
arima_fit<-arima(ReturnsOffset,order=c(3,0,3))
arch.test(arima_fit)
arch.test(arima_fit)
y <- coin_raw$diff[6501:7000]
data <- data.frame(date=x,logprice=y)
arima.fit <- auto.arima(y, seasonal=F, allowmean=T)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
arima.forecast <- Arima(y, model=arima.fit)
ggplot(data=data, aes(x=date, y=logprice))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
library(ggplot2)
library(cowplot)
ggplot(data=data, aes(x=date, y=logprice))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
library("aTSA")
returns <- as.xts(subset(coin_raw, select = diff))
ReturnsOffset = returns[6501:7000]
#install.packages("aTSA")
library("aTSA")
arima_fit<-arima(ReturnsOffset,order=c(2,0,3))
arch.test(arima_fit)
arima_fit<-arima(y,order=c(2,0,3))
arch.test(arima_fit)
y = as.xts(y)
y <- as.xts(subset(coin_raw, select = diff))[6501:7000]
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="norm"
)
fit = tryCatch(
ugarchfit(
spec, y, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# fitted AR(3,0,3)-GARCH(1,1)
coef(fit)
#normality test - Jarque-Beta test
library(tseries)
jarque.bera.test(fit@fit$residuals/fit@fit$sigma)
#fit Garch again with t-dist
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="t"
)
#fit Garch again with t-dist
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="std"
)
fit = tryCatch(
ugarchfit(
spec, y, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
# plot res and standardized_res
res <- residuals(fit)
row.names(res) <- row.names(y)
p_diff <- ggplot(data=res, aes(x=Index,y=res[,1]))+
geom_line(color="#00AFBB", size=0.5)+
theme_gray()+
xlab("date")+ylab("residual")
p_stdiff <- ggplot(data=res, aes(x=Index,y=res[,1]/sigma(fit)))+
geom_line(color="#E7B800", size=0.5)+
theme_gray()+
xlab("date")+ylab("standardized_res")
plot_grid(p_diff, p_stdiff, align = "v", ncol=1)
arima.fit <- auto.arima(y, seasonal=F)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
fit = tryCatch(
ugarchfit(
spec, y, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
# plot res and standardized_res
res <- residuals(fit)
row.names(res) <- row.names(y)
p_diff <- ggplot(data=res, aes(x=Index,y=res[,1]))+
geom_line(color="#00AFBB", size=0.5)+
theme_gray()+
xlab("date")+ylab("residual")
p_stdiff <- ggplot(data=res, aes(x=Index,y=res[,1]/sigma(fit)))+
geom_line(color="#E7B800", size=0.5)+
theme_gray()+
xlab("date")+ylab("standardized_res")
plot_grid(p_diff, p_stdiff, align = "v", ncol=1)
arch.test(arima_fit)
### change point detection
cov_cusum <- function(dat, h) {
n <- length(dat)
xmean <- mean(dat)
x1 <- dat[1:(n-h)] - xmean
x2 <- dat[(h+1):n] - xmean
return(sum(x1 * x2/n))
}
sd_cusum <- function(dat, max_h=length(dat)^(1/3)) {
n <- length(dat)
sd2_hat <- cov_cusum(dat,0)
for(i in 1:max_h) {
sd2_hat <- sd2_hat + 2*(cov_cusum(dat,i))
}
return(sd2_hat)
}
CUSUM_calc <- function(dat) {
## return : maximum cusum value and maximum point
n <- length(dat)
cusum <- abs((cumsum(dat) - (1:n/n)*sum(dat) ) / ( sqrt(n) * sqrt(sd_cusum(dat))))
argmax <- which.max(cusum)
if(max(cusum)>1.345) return(list("CUSUM_statistics" = max(cusum), "change_point"=argmax))
else return(print("no change"))
}
CUSUM_calc(y)
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[6300:7300])
BTC_4h <- read.csv("BTC_4h.csv")
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[6000:7000])
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[5000:7000])
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[3000:7000])
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[0:7000])
CUSUM_calc(as.xts(subset(coin_raw, select = diff))[1:7000])
fit@fit$sigma
CUSUM_calc(fit@fit$residuals/fit@fit$sigma)
arch.test(arima_fit)
arima.fit
arima.fit <- auto.arima(y, seasonal=F)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
arima.fit <- auto.arima(y, seasonal=F,allowmean = T)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
arima.forecast <- Arima(y, model=arima.fit)
ggplot(data=data, aes(x=date, y=logprice))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
### Fit GARCH with normal-dist
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="norm"
)
fit = tryCatch(
ugarchfit(
spec, y, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
fit = ugarchfit(spec, y, solver = 'hybrid')
#Fit Garch again with t-dist
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="std"
)
fit = ugarchfit(spec, y, solver = 'hybrid')
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
# plot res and standardized_res
res <- residuals(fit)
row.names(res) <- row.names(y)
p_diff <- ggplot(data=res, aes(x=Index,y=res[,1]))+
geom_line(color="#00AFBB", size=0.5)+
theme_gray()+
xlab("date")+ylab("residual")
p_stdiff <- ggplot(data=res, aes(x=Index,y=res[,1]/sigma(fit)))+
geom_line(color="#E7B800", size=0.5)+
theme_gray()+
xlab("date")+ylab("standardized_res")
plot_grid(p_diff, p_stdiff, align = "v", ncol=1)
arima.fit
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
plot(fit)
arima.fit <- auto.arima(y, seasonal=F,mean=T)
spec
arima(y,order=c(2,0,1),include.mean = T)
arima.fit$arma
arima(y,order=c(2,0,3),include.mean = T)
auto_arima <- auto.arima(y, seasonal=F,mean=T)$arma
auto_arima <- auto.arima(y, seasonal=F,allowmean = T)$arma
auto.arima
arima(y,order=c(auto_arima[1],0,auto_arima[2]),include.mean = T)
arima.fit <- arima(y,order=c(auto_arima[1],0,auto_arima[2]),include.mean = T)
arima.order <- arimaorder(arima.fit)
arima.order
arima.fit
arima.forecast <- Arima(y, model=arima.fit)
ggplot(data=data, aes(x=date, y=logprice))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
arimaorder(auto.arima(y, seasonal=F,allowmean = T))
arima.order <- arimaorder(auto.arima(y, seasonal=F,allowmean = T)) #auto.arima로 차수결정
arima.fit <- arima(y, order=arima.order, include.mean = T) #arima로 평균이있는 ARIMA fit
arima.order
arima.fit
arima.forecast <- Arima(y, model=arima.fit)
ggplot(data=data, aes(x=date, y=logprice))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
ggplot(data=data, aes(x=date, y=diffedLog))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
ggplot(data=data, aes(x=date, y=diff))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
forecast_y <- as.xts(subset(coin_raw, select = diff))[7001:7043]
arima.forecast <- Arima(forecast_y, model=arima.fit)
fitted(arima.forecast)
plot(as.xts(subset(coin_raw, select = diff))[6501:7043])
points(7001:7043, fitted(arima.forecast), col=2, type='l')
plot(as.xts(subset(coin_raw, select = diff))[7001:7043])
points(7001:7043, fitted(arima.forecast), col=2, type='l')
fitted(arima.forecast)
plot(fitted(arima.forecast))
plot(as.xts(subset(coin_raw, select = diff))[7001:7043])
arima.forecast <- forecast(arima.fit, h=43)
arima.forecast <- forecast(arima.fit, h = 43)
library(forecast)
arima.forecast <- forecast(arima.fit, h = 43)
## data forecast
arima.forecast <- forecast(arima.fit)
ggplot(data=data, aes(x=date, y=diff)+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
)
ggplot(data=data, aes(x=date, y=diff))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=data, aes(x=date,y=fitted(arima.forecast)),color='red',size=0.5)+
theme_gray()
arima.order
arima.fit
arima.forecast <- forecast(arima.fit, 43)
plot(fitted(arima.forecast))
plot(as.xts(subset(coin_raw, select = diff))[7001:7043])
plot(as.xts(subset(coin_raw, select = diff))[7001:7043])
points(fitted(arima.forecast), col=2, type='l')
points(fitted(arima.forecast), col=2)
arima.forecast <- predict(arima.fit, 43)
plot(fitted(arima.forecast))
plot(arima.forecast)
arima.forecast
plot(arima.forecast$pred)
arima.forecast <- forecast(arima.fit, 43)
plot(as.xts(subset(coin_raw, select = diff))[7001:7043])
plot(forecast_y)
points(fitted(arima.forecast), col=2)
forecast_y
forecast_y$diff
index(forecast_y)
plot(forecast_y)
points(index(forecast_y),fitted(arima.forecast), col=2,type="l")
fitted(arima.forecast)
arima.forecast <- forecast(arima.fit, 43)
arima.forecast$pred
points(index(forecast_y),arima.forecast$pred, col=2,type="l")
arima.forecast <- Arima(forecast_y, model=arima.fit)
fitted(arima.forecast)
arima.forecast <- fitted(Arima(forecast_y, model=arima.fit))
plot(forecast_y)
points(index(forecast_y),arima.forecast, col=2,type="l")
plot(index(forecast_y),forecast_y)
points(index(forecast_y),arima.forecast, col=2,type="l")
plot(index(forecast_y),forecast_y,type="l")
points(index(forecast_y),arima.forecast, col=2,type="l")
ggplot(data=forecast_y, aes(x=index(forecast_y), y=diff))+
geom_line(color="#00AFBB", size=0.5)
ggplot(data=forecast_y, aes(x=index(forecast_y), y=diff))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=forecast_y, aes(x=index(forecast_y),y=arima.forecast),color='red',size=0.5)+
theme_gray()
arima_fit<-arima(y,order=arima.order)
arch.test(arima_fit)
##### Fit GARCH with normal-dist #####
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="norm"
)
fit = ugarchfit(spec, y, solver = 'hybrid')
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
arima.fit
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
arch.test(arima_fit)
jarque.bera.test(fit@fit$residuals/fit@fit$sigma)
#Fit Garch again with t-dist
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(arima.order[1], arima.order[3]), include.mean=T),
distribution.model="std"
)
fit = ugarchfit(spec, y, solver = 'hybrid')
# fitted AR(2,0,3)-GARCH(1,1)
coef(fit)
# plot res and standardized_res
res <- residuals(fit)
row.names(res) <- row.names(y)
p_diff <- ggplot(data=res, aes(x=Index,y=res[,1]))+
geom_line(color="#00AFBB", size=0.5)+
theme_gray()+
xlab("date")+ylab("residual")
p_stdiff <- ggplot(data=res, aes(x=Index,y=res[,1]/sigma(fit)))+
geom_line(color="#E7B800", size=0.5)+
theme_gray()+
xlab("date")+ylab("standardized_res")
plot_grid(p_diff, p_stdiff, align = "v", ncol=1)
ggplot(data=forecast_y, aes(x=index(forecast_y), y=diff))+
geom_line(color="#00AFBB", size=0.5)+
geom_line(data=forecast_y, aes(x=index(forecast_y),y=arima.forecast),color='red',size=0.5)+
theme_gray()
